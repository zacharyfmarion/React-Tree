(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./src/index.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),r=t.n(a),o=t("./node_modules/@mdx-js/tag/dist/index.js"),i=t("./src/components/Tree.tsx"),d=t("./src/components/Node.tsx");try{Network.displayName="Network",Network.__docgenInfo={description:"Tree component",displayName:"Network",props:{rootId:{defaultValue:null,description:"The element that you wish to display at the root of the tree",name:"rootId",required:!1,type:{name:"ReactText"}},showLabels:{defaultValue:null,description:"Whther or not to show the labels on each node",name:"showLabels",required:!1,type:{name:"boolean"}},vertices:{defaultValue:null,description:"A data structure of vertices that can be passed in as an alternative\nto using the Node elements passed in a children",name:"vertices",required:!1,type:{name:"Map<ReactText, ReactText[]>"}},nodeSize:{defaultValue:null,description:"Used in tandem with the vertices prop to pass in the node size that\nwill be used for each node",name:"nodeSize",required:!1,type:{name:"number"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},width:{defaultValue:null,description:"The width of the viewbox that the tree is being rendered in",name:"width",required:!0,type:{name:"number"}},height:{defaultValue:null,description:"The height of the viewbox that the tree is being rendered in",name:"height",required:!0,type:{name:"number"}},levelSeparation:{defaultValue:null,description:"The fixed distance between adjacent levels of the tree. Used in\ndetermining they-coordinate of a node being positioned.",name:"levelSeparation",required:!0,type:{name:"number"}},maxDepth:{defaultValue:null,description:"The maximum number of levels in the tree to be positioned. If all\nlevels are to be positioned, set this value to positive infinity (or an\nappropriate numerical value).",name:"maxDepth",required:!0,type:{name:"number"}},siblingSeparation:{defaultValue:null,description:"The minimum distance between adjacent siblings of the tree.",name:"siblingSeparation",required:!0,type:{name:"number"}},subtreeSeparation:{defaultValue:null,description:"The minimum distance between adjacent subtrees of a tree. For\nproper aesthetics, this value is normally somewhat larger than\nSiblingSeparation.",name:"subtreeSeparation",required:!0,type:{name:"number"}}}},"undefined"!==typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/index.tsx#Network"]={docgenInfo:Network.__docgenInfo,name:"Network",path:"src/components/index.tsx#Network"})}catch(e){}try{NodeComponent.displayName="NodeComponent",NodeComponent.__docgenInfo={description:"",displayName:"NodeComponent",props:{id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"ReactText"}},childNodes:{defaultValue:null,description:"",name:"childNodes",required:!1,type:{name:"ReactText[]"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},r:{defaultValue:null,description:"",name:"r",required:!1,type:{name:"number"}},x:{defaultValue:null,description:"",name:"x",required:!1,type:{name:"number"}},y:{defaultValue:null,description:"",name:"y",required:!1,type:{name:"number"}},showLabel:{defaultValue:null,description:"",name:"showLabel",required:!1,type:{name:"boolean"}}}},"undefined"!==typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/index.tsx#NodeComponent"]={docgenInfo:NodeComponent.__docgenInfo,name:"NodeComponent",path:"src/components/index.tsx#NodeComponent"})}catch(e){}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}n.default=function(e){var n=e.components;l(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"react-svg-tree"}},r.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"h1",props:{"aria-hidden":!0,href:"#react-svg-tree"}},r.a.createElement(o.MDXTag,{name:"span",components:n,parentName:"a",props:{className:"icon-link"}},"#")),"react-svg-tree"),r.a.createElement(i.a,{width:200,height:75,rootId:"A",showLabels:!0},r.a.createElement(d.b,{id:"A",childNodes:["B","C","D"]}),r.a.createElement(d.b,{id:"B",childNodes:["E","F"]}),r.a.createElement(d.b,{id:"C",childNodes:["G","H"]}),r.a.createElement(d.b,{id:"D",childNodes:["I"]}),r.a.createElement(d.b,{id:"E"}),r.a.createElement(d.b,{id:"F"}),r.a.createElement(d.b,{id:"G"}),r.a.createElement(d.b,{id:"H"}),r.a.createElement(d.b,{id:"I"})),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"react-svg-tree")," is a package that renders an svg tree from a data structure of nodes. It can also optionally render the tree from children that are provided at render. The package exposes two components, ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Tree")," and ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Node"),", which are documented on their respective pages."))}}}]);